/*
  The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

  73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/

/*
  One way of approaching this problem is to find the product of any given string of digits. Once that can be accomplished, it becomes possible to check
  the product of every set of a given length against the current highest product. By iterating through all lists of n digits you can easily find the solution. 
  This problem must deal with long numbers as strings as the limit for value is capped at 2^53 - 1 for numbers in JS (Number.MAX_SAFE_INTEGER).
*/

function productFinder(stringToMultiply: string): number {
  let product: number = 1;

  stringToMultiply.split("").forEach(function (value: string): void {
    product *= parseInt(value);
  })

  return product;
}

function highestProductOfNNumbers(longNum: string, numOfConsecutiveDigits: number): number {

  let highestProduct: number = 0;
  let currentProduct: number = 0;

  for (let i = 0; i < longNum.length - numOfConsecutiveDigits; i++) {
    currentProduct = productFinder(longNum.slice(i, i + numOfConsecutiveDigits));
    if (currentProduct > highestProduct) {
      highestProduct = currentProduct;
    }
  }

  return highestProduct;
}

console.log(highestProductOfNNumbers("73167176531330624919225119674426574742355349194934969835203127745063262395783180169848" +
  "0186947885184385861560789112949495459501737958331952853208805511125406987471585238630507" +
  "1569329096329522744304355766896648950445244523161731856403098711121722383113622298934233" +
  "80308135336276614282806444486645238749303589072962904915604407723907138105158593079608667" +
  "017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540" +
  "594752243525849077116705560136048395864467063244157221553975369781797784617406495514929086" +
  "2569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000" +
  "8895243450658541227588666881164271714799244429282308634656748139191231628245861786645835912" +
  "4566529476545682848912883142607690042242190226710556263211111093705442175069416589604080719" +
  "8403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607" +
  "17606058861164671094050775410022569831552000559357297257163626956188267042825248360082325753" +
  "0420752963450", 13));